#ifndef __WEBVTTXX_STRING__
#	define __WEBVTTXX_STRING__

#	include <webvtt/string.h>
#	include "base"

#	define UTF16_LEFT_TO_RIGHT   (0x200E)
#	define UTF16_RIGHT_TO_LEFT   (0x200F)
#	define UTF16_NO_BREAK_SPACE  (0x00A0)

namespace WebVTT
{

class String
{
public:
	inline String()
	{
		webvtt_init_string( &string );
	}

	inline String( webvtt_string *other )
	{
		webvtt_copy_string( &string, other );
	}

	inline String( const byte *buffer, uint len )
	{
		if( WEBVTT_FAILED( webvtt_string_from_utf8( &string, buffer, len ) ) )
		{
			// TODO: Throw exception on errors.
		}
	}

	/**
	 * Copy constructors
	 */
	inline String( const String &other )
	{
		webvtt_copy_string( &string, &other.string );
	}

	inline String &operator=( const String &other )
	{
		webvtt_copy_string( &string, &other.string );
		return *this;
	}

	inline ~String()
	{
		webvtt_release_string( &string );
	}

	inline void detach()
	{
		webvtt_string_detach( &string );
	}

	inline const wchar *text() const
	{
		return webvtt_string_text(&string);
	}

	inline uint length() const
	{
		return webvtt_string_length(&string);
	}

	inline uint capacity() const
	{
		return webvtt_string_capacity(&string);
	}

	inline String &append( wchar ch )
	{
		webvtt_status status;
		if( WEBVTT_FAILED(status = webvtt_string_putc( &string, ch ) ) )
		{
			// TODO: Throw exception on errors
		}
		return *this;
	}

	inline String &append( const String &other, int len = -1 )
	{
		webvtt_status status;
		if( WEBVTT_FAILED(status = webvtt_string_append( &string, other.text(), len < 0 ? other.length() : (uint)len ) ) )
		{
			// TODO: Throw exception on errors
		}
		return *this;
	}

private:
	webvtt_string string;
};

class StringList
{
public:
	inline StringList( webvtt_string_list otherStringList )
	{
		stringList = otherStringList;
	}

	inline String stringAtIndex( uint index )
	{
		if( index <= stringList.length )
			return String( &stringList.items[index] );
		return String();
	}

	inline uint length() { return stringList.length; }
	inline uint alloc() { return stringList.alloc; }

private:
	webvtt_string_list stringList;
};

}

#endif
