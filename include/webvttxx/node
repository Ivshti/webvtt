#ifndef __WEBVTTXX_NODE__
# define __WEBVTTXX_NODE__

# include <vector>
# include <webvtt/cue.h>
# include "string"
# include "timestamp"

namespace WebVTT
{

class InternalNode;
class TimeStampNode;
class TextNode;
class Node
{
public:
  enum NodeKind {
    Class = WEBVTT_CLASS,
    Italic = WEBVTT_ITALIC,
    Underline = WEBVTT_UNDERLINE,
    Bold = WEBVTT_BOLD,
    Ruby = WEBVTT_RUBY,
    RubyText = WEBVTT_RUBY_TEXT,
    Voice = WEBVTT_VOICE,
    Text = WEBVTT_TEXT,
    TimeStamp = WEBVTT_TIME_STAMP
  };
  Node() { node = 0; }
  Node( webvtt_node *otherNode ) : node( otherNode ) { }
  inline NodeKind kind() const { return (NodeKind)node->kind; }
  const InternalNode *toInternalNode() const;
  const TextNode *toTextNode() const;
  const TimeStampNode *toTimeStampNode() const;
  virtual ~Node() { /* Don't need to free the webvtt_node here as it will be freed when it's parent cue is freed. */ }
protected:
  webvtt_node *node;
};

typedef std::vector<Node *>::const_iterator NodeIterator;

class InternalNode : public Node
{
public:
  InternalNode() { }
  InternalNode( webvtt_node *otherNode ) : Node( otherNode ) { createNodeList(); }
  InternalNode( const InternalNode &otherNode ) : Node( otherNode.node ) { createNodeList(); }
  inline String annotation() const { return String( &node->data.internal_data->annotation ); }
  inline StringList cssClasses() const { return StringList( node->data.internal_data->css_classes ); }
  inline uint childCount() const { return node->data.internal_data->length; }
  const Node *child( uint index ) const;
  inline NodeIterator firstNode() const { return children.begin(); }
  inline NodeIterator lastNode() const { return children.end(); }
  ~InternalNode();
private:
  void createNodeList();
  std::vector<Node *> children;
};

class TextNode : public Node
{
public:
  TextNode() { }
  TextNode( webvtt_node *otherNode ) : Node( otherNode ) { }
  inline String content() const { return String( &node->data.text ); }
};

class TimeStampNode : public Node
{
public:
  TimeStampNode() { }
  TimeStampNode( webvtt_node *otherNode ) : Node( otherNode ) { }
  inline Timestamp timeStamp() const { return Timestamp( node->data.timestamp ); }
};

}

#endif