//
// Copyright (c) 2013 Mozilla Foundation and Contributors
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//  - Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//  - Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

#ifndef __WEBVTTXX_NODE_LIST__
# define __WEBVTTXX_NODE_LIST__

#include <webvtt/node_list.h>
#include <webvttxx/node>
#include <stdio.h>

namespace WebVTT {

class NodeList {

public:
  NodeList()
  {
    webvtt_init_node_list( &list );
  }

  NodeList( const NodeList &other )
  {
    webvtt_copy_node_list( &list, &other.list );
  }

  NodeList( const ::webvtt_node_list *other )
  {
    webvtt_copy_node_list( &list, other );
  }

  ~NodeList()
  {
    webvtt_release_node_list( &list );
  }

  int size() const { list.d->size; }
  int length() const { return size(); }
  int alloc() const { list.d->alloc; }

  // Append a node to the back of the list
  bool push( const Node &n )
  {
    return !WEBVTT_FAILED( ::webvtt_node_list_push( &list, n.node ) );
  }

  // Take the last/top node from the list
  bool pop( Node &result )
  {
    ::webvtt_node *n;
    if( !!::webvtt_node_list_pop( &list, &result.node ) ) {
      result = Node(n);
      ::webvtt_release_node(&n);
      return true;
    }
    return false;
  }

  // Return the node at the top of stack / back of list
  bool top( Node &result ) const
  {
    ::webvtt_node *n;
    if( !!::webvtt_node_list_top( &list, &result.node ) ) {
      result = Node(n);
      ::webvtt_release_node(&n);
      return true;
    }
    return false;
  }

  // Prepend a node to this list
  bool unshift( const Node &n )
  {
    return !WEBVTT_FAILED(::webvtt_node_list_unshift( &list, n.node ));
  }

  // Take the first node in this list
  // (Much less efficient than taking from end of the list!)
  bool shift( Node &result )
  {
    ::webvtt_node *n;
    if( !!::webvtt_node_list_shift( &list, &n ) ) {
      result = Node(n);
      ::webvtt_release_node(&n);
      return true;
    }
    return false;
  }

  // Get the node at the front of this list
  bool front( Node &result ) const
  {
    ::webvtt_node *n;
    if( !!::webvtt_node_list_front( &list, &n ) ) {
      result = Node(n);
      ::webvtt_release_node(&n);
      return true;
    }
    return false;
  }

private:
  ::webvtt_node_list list;
};

}

#endif
